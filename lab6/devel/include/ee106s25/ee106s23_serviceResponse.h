// Generated by gencpp from file ee106s25/ee106s23_serviceResponse.msg
// DO NOT EDIT!


#ifndef EE106S25_MESSAGE_EE106S23_SERVICERESPONSE_H
#define EE106S25_MESSAGE_EE106S23_SERVICERESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ee106s25
{
template <class ContainerAllocator>
struct ee106s23_serviceResponse_
{
  typedef ee106s23_serviceResponse_<ContainerAllocator> Type;

  ee106s23_serviceResponse_()
    : response_msg()  {
    }
  ee106s23_serviceResponse_(const ContainerAllocator& _alloc)
    : response_msg(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _response_msg_type;
  _response_msg_type response_msg;





  typedef boost::shared_ptr< ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ee106s23_serviceResponse_

typedef ::ee106s25::ee106s23_serviceResponse_<std::allocator<void> > ee106s23_serviceResponse;

typedef boost::shared_ptr< ::ee106s25::ee106s23_serviceResponse > ee106s23_serviceResponsePtr;
typedef boost::shared_ptr< ::ee106s25::ee106s23_serviceResponse const> ee106s23_serviceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator1> & lhs, const ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.response_msg == rhs.response_msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator1> & lhs, const ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ee106s25

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7ff18183e9537ad289a116cf4aae4ef3";
  }

  static const char* value(const ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7ff18183e9537ad2ULL;
  static const uint64_t static_value2 = 0x89a116cf4aae4ef3ULL;
};

template<class ContainerAllocator>
struct DataType< ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ee106s25/ee106s23_serviceResponse";
  }

  static const char* value(const ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string response_msg\n"
;
  }

  static const char* value(const ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.response_msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ee106s23_serviceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ee106s25::ee106s23_serviceResponse_<ContainerAllocator>& v)
  {
    s << indent << "response_msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.response_msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EE106S25_MESSAGE_EE106S23_SERVICERESPONSE_H
